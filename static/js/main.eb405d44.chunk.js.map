{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","map","good","index","id","name","App","sortBy","useState","isStarted","setStart","reversed","setReversed","sorted","setSorted","renderedGoods","sort","good1","good2","localeCompare","length","reverse","className","type","onClick","current","ReactDOM","render","document","getElementById"],"mappings":"iOAQMA,EAA0B,CAC9B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UACAC,KAAI,SAACC,EAAMC,GAAP,MAA0B,CAC9BC,GAAID,EAAQ,EACZE,KAAMH,MA4FOI,EAzFO,WACpB,IAa6BC,EAb7B,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAwBMC,EAAa,YAAOf,GAQ1B,OArB6BO,EAeTM,EAAfE,EAdUC,MAAK,SAACC,EAAOC,GACxB,OAAQX,GACN,IAAK,OACH,OAAOU,EAAMZ,KAAKc,cAAcD,EAAMb,MACxC,IAAK,SACH,OAAOY,EAAMZ,KAAKe,OAASF,EAAMb,KAAKe,OACxC,QACE,OAAO,MASXT,GACFI,EAAcM,UAId,sBAAKC,UAAU,MAAf,UACE,uCAECb,EAEG,qCACE,6BACGM,EAAcd,KAAI,SAAAC,GAAI,OACrB,6BAAmBA,EAAKG,MAAfH,EAAKE,SAIlB,wBACEmB,KAAK,SACLC,QA5CI,kBAAMZ,GAAY,SAAAa,GAAO,OAAKA,MA0CpC,qBAOA,wBACEF,KAAK,SACLC,QAlDO,kBAAMV,EAAU,SAgDzB,iCAOA,wBACES,KAAK,SACLC,QAxDS,kBAAMV,EAAU,WAsD3B,4BAOA,wBACES,KAAK,SACLC,QA9DE,WACZZ,GAAY,GACZE,EAAU,KA0DF,sBASF,wBACES,KAAK,SACLC,QA3EI,kBAAMd,GAAS,IAyErB,uBCnGVgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.eb405d44.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\ninterface Good {\n  id: number,\n  name: string,\n}\n\nconst goodsFromServer: Good[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n].map((good, index: number) => ({\n  id: index + 1,\n  name: good,\n}));\n\nconst App: React.FC = () => {\n  const [isStarted, setStart] = useState(false);\n  const [reversed, setReversed] = useState(false);\n  const [sorted, setSorted] = useState('');\n\n  const start = () => setStart(true);\n  const reverse = () => setReversed(current => !current);\n  const sortByName = () => setSorted('name');\n  const sortByLength = () => setSorted('length');\n  const reset = () => {\n    setReversed(false);\n    setSorted('');\n  };\n\n  const sort = (goods: Good[], sortBy: string) => {\n    return goods.sort((good1, good2) => {\n      switch (sortBy) {\n        case 'name':\n          return good1.name.localeCompare(good2.name);\n        case 'length':\n          return good1.name.length - good2.name.length;\n        default:\n          return 0;\n      }\n    });\n  };\n\n  const renderedGoods = [...goodsFromServer];\n\n  sort(renderedGoods, sorted);\n\n  if (reversed) {\n    renderedGoods.reverse();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Goods</h1>\n\n      {isStarted\n        ? (\n          <>\n            <ul>\n              {renderedGoods.map(good => (\n                <li key={good.id}>{good.name}</li>\n              ))}\n            </ul>\n\n            <button\n              type=\"button\"\n              onClick={reverse}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={sortByName}\n            >\n              Sort Alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={sortByLength}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          </>\n        )\n        : (\n          <button\n            type=\"button\"\n            onClick={start}\n          >\n            Start\n          </button>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}